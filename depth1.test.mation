//  "//" 
 //
// Line comment starts with "//" and extends to end of line

// Top level must be key-value pairs, which is denoted by `A: B`
/** md **
## Basics

### Markdown

Mation enables styled documentation for configuration files. Lines between markdown denoted start and end tags will be syntax highlighted in supported editors.
Markdown documentation sections can appear anywhere except in-between a key-value definition.

Start tag is
/** <case insensitive 'md'|'note'> **

End tag is the standard C-style block-comment end tag '*' follow immediately by '/'.

### Keys

Keys can be unquoted as long as they do not contain spaces and start with legal literal characters of a..z|A..Z|0..9|'$'|'_'|'@'|
Non-starting characters can contain other legal literal characters after the first character, which includes '-'|

Duplicate keys are allowed. But API can be (later) configured to catch and throw error on duplicate keys within the same level.

### Values 

### Key Value Pairs 
Commas are required after each but last pair, which can be inserted or omitted.
*/

a: 1,        // unquoted key
a: 2,        // duplicate key
"akey": 2,   // double quotes
'key2': 2,   // single quotes
'"k"' : 2,   // double within single quotes
"'k'" : 2,   // single within double quotes
"\"k" : 2,   // use escape character '\x' will appear vebatem as is
try-to: do,  // dashed literal key
or: do-this, // dashed literal value 

/** md **
## Data Structures

### Lists and Arrays/Tuples

Lists are denoted with `[ ... ]` and its values do not need to be of the same type.
Arrays or Tuples are denoted with `( ... )` and will only contain values of the same type.

If you are you working with a target language such as JavaScript, it makes no difference which is used since it does not differenciate the two.
The exception being Commands, which must be enclosed in `()`.
For other languages where there is a difference, the parser for if it exists, will generate the correct data structure. 

Commas are optional within Lists and Arrays/Tuples.

### Commands
 
Commands are meant to run in sequence, without non-command values mixed-in.
Thus, they must be enclosed in an Array/Tuple expression `( ... )`.

Command and its agruments will be parsed as an array of `"name", arg1, arg2, ...`.
If you rather have the arguments be enclosed in an array, or if your function takes in an array, then enclose the arugments in it.

Optonal commas are useful for readability of arguments to commands.
Eg. If the function signature is f(x0, y0, x1, y1), you call it via `f 1 2, 3 -4;`
*/

a:1,
b:[1 2],
do: [             // Use "(" to enforce array structure
  move 1 2;       // No "," needed between non-keyvalue arguments
  move [1 2];
  move 1 2, 3 -4; // For readability, commas can be inserted between arguments.
  move [1,2] [3,-4]; // To pass list of lists
  move [1 2] [3 -4]; // Same
  move (1,2) (3,-4); // Same, if you prefer "()"s for coordinates
  move (1 2) (3 -4); // Same
  turn { x:1},{y:2 }; // Two key-values map
  turn { x:1, y:2 };  // One key-values map
  turn x:1, y:2;      // One key-values map
  turn left 1 right 2;
//  move [[1 2]];
]
//
 //